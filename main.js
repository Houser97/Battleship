(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>c});var t=r(537),a=r.n(t),o=r(645),i=r.n(o)()(a());i.push([n.id,":root {\n    --thickness-boarders: 2px;\n    --color-boarders: rgb(46, 46, 183);\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    outline: none;\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: #E3F2FD;\n    height: 100vh;\n}\n\nheader {\n    width: 100%;\n    background-color: rgb(29, 25, 25);\n    color: white;\n    font-size: 10vh;\n    min-height: 12vh;\n    max-height: 12vh;\n    font-weight: 600;\n    display: flex;\n    justify-content: center; align-items: center;\n}\n\n.gameboard {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/*-------------------------------------------------------GRID*/\n/*-----------------------------------------------------------*/\n.outer-grid{\n    display: grid;\n    min-height: 450px;\n    min-width: 450px;\n    grid-template-columns: repeat(11,1fr);\n    grid-template-rows: repeat(11,1fr);\n    margin: 10%;\n}\n\n.grid-player {\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    grid-template-columns: repeat(10,1fr);\n    grid-template-rows: repeat(10,1fr);\n    border: 1.4px solid black;\n}\n\n.grid-unit {\n    border: 1px solid silver;\n}\n\n.coordinate-top{\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 1;\n    grid-template-columns: repeat(10,1fr);\n    text-align: center;\n    align-items: center;\n}\n\n.coordinate-left{\n    display: grid;\n    grid-column: 1;\n    grid-row: 2/-1;\n    grid-template-rows: repeat(10,1fr);\n    align-items: center; text-align: center;\n}\n\n.ship {\n    background-color: rgba(35, 35, 245, 0.55);\n}\n\n.empty{\n    background-color: rgb(223, 65, 65);\n}\n\n.hit{\n    background-color: rgb(70, 223, 65);\n}\n\n.sunk {\n    background-color: black;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,kCAAkC;AACtC;;AAEA;IACI,UAAU;IACV,SAAS;IACT,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,iCAAiC;IACjC,YAAY;IACZ,eAAe;IACf,gBAAgB;IAChB,gBAAgB;IAChB,gBAAgB;IAChB,aAAa;IACb,uBAAuB,EAAE,mBAAmB;AAChD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA,8DAA8D;AAC9D,8DAA8D;AAC9D;IACI,aAAa;IACb,iBAAiB;IACjB,gBAAgB;IAChB,qCAAqC;IACrC,kCAAkC;IAClC,WAAW;AACf;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,cAAc;IACd,qCAAqC;IACrC,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,WAAW;IACX,qCAAqC;IACrC,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,cAAc;IACd,kCAAkC;IAClC,mBAAmB,EAAE,kBAAkB;AAC3C;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:[":root {\n    --thickness-boarders: 2px;\n    --color-boarders: rgb(46, 46, 183);\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    outline: none;\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: #E3F2FD;\n    height: 100vh;\n}\n\nheader {\n    width: 100%;\n    background-color: rgb(29, 25, 25);\n    color: white;\n    font-size: 10vh;\n    min-height: 12vh;\n    max-height: 12vh;\n    font-weight: 600;\n    display: flex;\n    justify-content: center; align-items: center;\n}\n\n.gameboard {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/*-------------------------------------------------------GRID*/\n/*-----------------------------------------------------------*/\n.outer-grid{\n    display: grid;\n    min-height: 450px;\n    min-width: 450px;\n    grid-template-columns: repeat(11,1fr);\n    grid-template-rows: repeat(11,1fr);\n    margin: 10%;\n}\n\n.grid-player {\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    grid-template-columns: repeat(10,1fr);\n    grid-template-rows: repeat(10,1fr);\n    border: 1.4px solid black;\n}\n\n.grid-unit {\n    border: 1px solid silver;\n}\n\n.coordinate-top{\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 1;\n    grid-template-columns: repeat(10,1fr);\n    text-align: center;\n    align-items: center;\n}\n\n.coordinate-left{\n    display: grid;\n    grid-column: 1;\n    grid-row: 2/-1;\n    grid-template-rows: repeat(10,1fr);\n    align-items: center; text-align: center;\n}\n\n.ship {\n    background-color: rgba(35, 35, 245, 0.55);\n}\n\n.empty{\n    background-color: rgb(223, 65, 65);\n}\n\n.hit{\n    background-color: rgb(70, 223, 65);\n}\n\n.sunk {\n    background-color: black;\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);t&&i[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),a&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=a):u[4]="".concat(a)),e.push(u))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var o={},i=[],c=0;c<n.length;c++){var s=n[c],l=t.base?s[0]+t.base:s[0],u=o[l]||0,A="".concat(l," ").concat(u);o[l]=u+1;var d=r(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=a(p,t);t.byIndex=c,e.splice(c,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function a(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,a){var o=t(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var c=r(o[i]);e[c].references--}for(var s=t(n,a),l=0;l<o.length;l++){var u=r(o[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=s}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var a=void 0!==r.layer;a&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,a&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var a=e[t];if(void 0!==a)return a.exports;var o=e[t]={id:t,exports:{}};return n[t](o,o.exports,r),o.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0,(()=>{var n=r(379),e=r.n(n),t=r(795),a=r.n(t),o=r(569),i=r.n(o),c=r(565),s=r.n(c),l=r(216),u=r.n(l),A=r(589),d=r.n(A),p=r(426),f={};function h(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t,a,o=[],i=!0,c=!1;try{for(r=r.call(n);!(i=(t=r.next()).done)&&(o.push(t.value),!e||o.length!==e);i=!0);}catch(n){c=!0,a=n}finally{try{i||null==r.return||r.return()}finally{if(c)throw a}}return o}}(n,e)||function(n,e){if(n){if("string"==typeof n)return m(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?m(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,t=new Array(e);r<e;r++)t[r]=n[r];return t}function g(n){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},g(n)}f.styleTagTransform=d(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var y,b,C=(y=document.querySelectorAll(".player-2-grid"),{player1Plays:function(n){return y.forEach((function(e){return e.addEventListener("click",(function(e){"no winner"===w.theWinner&&"player1"===w.turn&&n.receiveAttack(e,"player1","player2")}))}))}}),v=function(n,e){return{hit:function(n,e,r){var t=r;return n.includes(e)&&(t-=1),t},isSunk:function(n,e){var r=e;return 0===n?["sunk",r-=1]:["no sunk",r]},currentHealth:e,coordinates:n}},I=(b=document,{showShips:function(n,e,r){for(var t=function(e){var t=r[e].coordinates,a=[];t.forEach((function(r){var t=b.querySelector(".".concat(n," .grid").concat(r));t.classList.add("ship"),t.dataset.shipNumber="".concat(e),a.push(t)}))},a=0;a<e;a+=1)t(a)},displayMiss:function(n){null!==n.getAttribute("data-ship-number")||n.className.includes("empty")||n.className.includes("hit")||n.classList.add("empty")},displayHit:function(n){null===n.getAttribute("data-ship-number")||n.className.includes("hit")||n.classList.add("hit")}}),B=function(){var n=[];function e(n){return 5===n.classList[0].length?n.classList[0].substr(-1):n.classList[0].substr(-2)}function r(n){return null!==n.getAttribute("data-ship-number")?parseInt(n.getAttribute("data-ship-number"),10):"no ship has been attacked"}function t(n){var e,r,t=Math.floor(2*Math.random());1===t?(r=Math.floor(10*Math.random()),e=Math.floor(Math.random()*(10-(n+1)))):(r=Math.floor(Math.random()*(10-(n+1))),e=Math.floor(10*Math.random()));for(var a=[],o=0;o<n;o+=1)1===t?a.push(parseInt("".concat(r).concat(e+o),10)):a.push(parseInt("".concat(r+o).concat(e),10));return a}function a(e,r){for(var t=0;t<=r;t+=1)for(var a=n[t],o=0;o<e.length;o+=1)if(a.coordinates.indexOf(e[o])>=0)return!0;return!1}return{generateShips:function(){for(var e,r=0;r<10;r+=1){var o=void 0;r<3&&(o=3),r>=3&&r<7&&(o=2),r>=7&&r<=9&&(o=1);var i=v([],o);n.push(i);do{e=t(o)}while(a(e,r));n[r].coordinates=e}},ships:n,receiveAttack:function(n,t,a){var o,i="no ship has been attacked";if("object"===g(n))o=e(n.target),i=r(n.target),w.setNextTurn(n.target,t,a,o,i);else{var c=document.querySelector(".player1 .grid".concat(n));o=e(c),i=r(c),w.setNextTurn(c,t,a,o,i)}},noShipsAvailable:function(n,e){return 0===e?n:"no winner"},numberOfShips:10}},k=function(){return{attack:function(n,e){return"player2"===n&&C.player1Plays(e),parseInt((r=Math.floor(10*Math.random()),t=Math.floor(10*Math.random()),"".concat(r).concat(t)),10);var r,t}}},w=function(){var n="player1",e="no winner",r=B(),t=B();r.generateShips(),t.generateShips(),I.showShips("player1",10,r.ships),I.showShips("player2",10,t.ships);var a=k(),o=k();function i(n,a,o,i){"sunk"===n&&a.coordinates.forEach((function(n){document.querySelector(".".concat(o," .grid").concat(n)).classList.add("sunk"),e="player1"===i?t.noShipsAvailable(i,t.numberOfShips):r.noShipsAvailable(i,r.numberOfShips)}))}a.attack("player2",t);var c,s=Date.now();return function t(){if(c=Date.now(),"no winner"===e){if(c-s>1e3/60){if("player2"===n){var a=o.attack("player1");r.receiveAttack(a,"player2","player1")}s=c}window.requestAnimationFrame(t)}}(),{currentTurn:n,setNextTurn:function(e,a,o,c,s){(e.className.includes("empty")||e.className.includes("hit"))&&(n=a),e.className.includes("empty")||e.className.includes("hit")||(I.displayMiss(e),I.displayHit(e),function(e,a,o,c,s){if(e.className.includes("hit")){var l;if("player1"===n){l=t.ships[s];var u,A=parseInt(c,10);l.currentHealth=l.hit(l.coordinates,A,l.currentHealth);var d=h(l.isSunk(l.currentHealth,t.numberOfShips),2);u=d[0],t.numberOfShips=d[1],i(u,l,"player2","player1")}else if("player2"===n){l=r.ships[s];var p,f=parseInt(c,10);l.currentHealth=l.hit(l.coordinates,f,l.currentHealth);var m=h(l.isSunk(l.currentHealth,r.numberOfShips),2);p=m[0],r.numberOfShips=m[1],i(p,l,"player1","player2")}n=a}else n=o}(e,a,o,c,s))},winner:e,get turn(){return n},get theWinner(){return e}}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YzZELEVBQVFoRSxPQUN4RGdFLEVBQVE3RCxjQUNSZ0QsRUFBaUJsRCxlQVppQixHQVVuQ3NELEVBVm1DLEtBVXBCSixFQUFpQmxELGNBVkcsS0FjcENxRCxFQUFnQkMsRUFBZVMsRUFBUyxVQUFXLFdBRXJEZixFQUFjWCxPQUNQVyxFQUFjVixFQVlyQjJCLENBQWNqRixFQUFNcUQsRUFBZUMsRUFBWUMsRUFBcUJDLEtBMkJ0RVMsT0FBQUEsRUFDSTdELFdBQVMsT0FBTzRELEdBQ2hCN0QsZ0JBQWMsT0FBTzhELElBbkhYLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXG4gICAgLS10aGlja25lc3MtYm9hcmRlcnM6IDJweDtcXG4gICAgLS1jb2xvci1ib2FyZGVyczogcmdiKDQ2LCA0NiwgMTgzKTtcXG59XFxuXFxuKiB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYm9keSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNFM0YyRkQ7XFxuICAgIGhlaWdodDogMTAwdmg7XFxufVxcblxcbmhlYWRlciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjksIDI1LCAyNSk7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgZm9udC1zaXplOiAxMHZoO1xcbiAgICBtaW4taGVpZ2h0OiAxMnZoO1xcbiAgICBtYXgtaGVpZ2h0OiAxMnZoO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmdhbWVib2FyZCB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1HUklEKi9cXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4ub3V0ZXItZ3JpZHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgbWluLWhlaWdodDogNDUwcHg7XFxuICAgIG1pbi13aWR0aDogNDUwcHg7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDExLDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDExLDFmcik7XFxuICAgIG1hcmdpbjogMTAlO1xcbn1cXG5cXG4uZ3JpZC1wbGF5ZXIge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWNvbHVtbjogMi8tMTtcXG4gICAgZ3JpZC1yb3c6IDIvLTE7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLDFmcik7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLDFmcik7XFxuICAgIGJvcmRlcjogMS40cHggc29saWQgYmxhY2s7XFxufVxcblxcbi5ncmlkLXVuaXQge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBzaWx2ZXI7XFxufVxcblxcbi5jb29yZGluYXRlLXRvcHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC1jb2x1bW46IDIvLTE7XFxuICAgIGdyaWQtcm93OiAxO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwxZnIpO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5jb29yZGluYXRlLWxlZnR7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtY29sdW1uOiAxO1xcbiAgICBncmlkLXJvdzogMi8tMTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsMWZyKTtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4uc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMzUsIDM1LCAyNDUsIDAuNTUpO1xcbn1cXG5cXG4uZW1wdHl7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyMjMsIDY1LCA2NSk7XFxufVxcblxcbi5oaXR7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig3MCwgMjIzLCA2NSk7XFxufVxcblxcbi5zdW5rIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx5QkFBeUI7SUFDekIsa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFNBQVM7SUFDVCxhQUFhO0lBQ2Isc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsaUNBQWlDO0lBQ2pDLFlBQVk7SUFDWixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHVCQUF1QixFQUFFLG1CQUFtQjtBQUNoRDs7QUFFQTtJQUNJLFlBQVk7SUFDWixXQUFXO0lBQ1gsYUFBYTtJQUNiLDZCQUE2QjtJQUM3QixtQkFBbUI7QUFDdkI7O0FBRUEsOERBQThEO0FBQzlELDhEQUE4RDtBQUM5RDtJQUNJLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHFDQUFxQztJQUNyQyxrQ0FBa0M7SUFDbEMsV0FBVztBQUNmOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QscUNBQXFDO0lBQ3JDLGtDQUFrQztJQUNsQyx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSx3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxxQ0FBcUM7SUFDckMsa0JBQWtCO0lBQ2xCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixjQUFjO0lBQ2QsY0FBYztJQUNkLGtDQUFrQztJQUNsQyxtQkFBbUIsRUFBRSxrQkFBa0I7QUFDM0M7O0FBRUE7SUFDSSx5Q0FBeUM7QUFDN0M7O0FBRUE7SUFDSSxrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSxrQ0FBa0M7QUFDdEM7O0FBRUE7SUFDSSx1QkFBdUI7QUFDM0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgICAtLXRoaWNrbmVzcy1ib2FyZGVyczogMnB4O1xcbiAgICAtLWNvbG9yLWJvYXJkZXJzOiByZ2IoNDYsIDQ2LCAxODMpO1xcbn1cXG5cXG4qIHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0UzRjJGRDtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuaGVhZGVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyOSwgMjUsIDI1KTtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBmb250LXNpemU6IDEwdmg7XFxuICAgIG1pbi1oZWlnaHQ6IDEydmg7XFxuICAgIG1heC1oZWlnaHQ6IDEydmg7XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOyBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZ2FtZWJvYXJkIHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUdSSUQqL1xcbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5vdXRlci1ncmlke1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBtaW4taGVpZ2h0OiA0NTBweDtcXG4gICAgbWluLXdpZHRoOiA0NTBweDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTEsMWZyKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTEsMWZyKTtcXG4gICAgbWFyZ2luOiAxMCU7XFxufVxcblxcbi5ncmlkLXBsYXllciB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtY29sdW1uOiAyLy0xO1xcbiAgICBncmlkLXJvdzogMi8tMTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsMWZyKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsMWZyKTtcXG4gICAgYm9yZGVyOiAxLjRweCBzb2xpZCBibGFjaztcXG59XFxuXFxuLmdyaWQtdW5pdCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHNpbHZlcjtcXG59XFxuXFxuLmNvb3JkaW5hdGUtdG9we1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWNvbHVtbjogMi8tMTtcXG4gICAgZ3JpZC1yb3c6IDE7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLDFmcik7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmNvb3JkaW5hdGUtbGVmdHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC1jb2x1bW46IDE7XFxuICAgIGdyaWQtcm93OiAyLy0xO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwxZnIpO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyOyB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5zaGlwIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgzNSwgMzUsIDI0NSwgMC41NSk7XFxufVxcblxcbi5lbXB0eXtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyMywgNjUsIDY1KTtcXG59XFxuXFxuLmhpdHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDcwLCAyMjMsIDY1KTtcXG59XFxuXFxuLnN1bmsge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG5jb25zdCBET00gPSAoKGRvYykgPT4ge1xuICBjb25zdCBncmlkc1BsYXllcjIgPSBkb2MucXVlcnlTZWxlY3RvckFsbChcIi5wbGF5ZXItMi1ncmlkXCIpO1xuICBjb25zdCBwbGF5ZXIxUGxheXMgPSAoZ2FtZWJvYXJkUGxheWVyMikgPT4gZ3JpZHNQbGF5ZXIyLmZvckVhY2goKGdyaWQpID0+IGdyaWQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgaWYgKGdhbWVGbG93LnRoZVdpbm5lciA9PT0gXCJubyB3aW5uZXJcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICBpZiAoZ2FtZUZsb3cudHVybiA9PT0gXCJwbGF5ZXIxXCIpIHtcbiAgICAgICAgZ2FtZWJvYXJkUGxheWVyMi5yZWNlaXZlQXR0YWNrKGUsIFwicGxheWVyMVwiLCBcInBsYXllcjJcIik7XG4gICAgICB9XG4gICAgfVxuICB9KSk7XG4gIHJldHVybiB7IHBsYXllcjFQbGF5cyB9O1xufSkoZG9jdW1lbnQpO1xuXG5jb25zdCBzaGlwRmFjdG9yeSA9IChjb29yZGluYXRlcywgbGVuZ3RoU2hpcCkgPT4ge1xuICBjb25zdCBjdXJyZW50SGVhbHRoID0gbGVuZ3RoU2hpcDtcbiAgY29uc3QgaGl0ID0gKHNoaXBDb29yZGluYXRlcywgY29vcmRpbmF0ZSwgaGVhbHRoKSA9PiB7XG4gICAgbGV0IHNoaXBzSGVhbHRoID0gaGVhbHRoO1xuICAgIGlmIChzaGlwQ29vcmRpbmF0ZXMuaW5jbHVkZXMoY29vcmRpbmF0ZSkpIHtcbiAgICAgIHNoaXBzSGVhbHRoIC09IDE7XG4gICAgfVxuICAgIHJldHVybiBzaGlwc0hlYWx0aDtcbiAgfTtcbiAgY29uc3QgaXNTdW5rID0gKGhlYWx0aCwgbnVtYmVyT2ZTaGlwcykgPT4ge1xuICAgIGxldCBzaGlwc0F2YWlsYWJsZSA9IG51bWJlck9mU2hpcHM7XG4gICAgaWYgKGhlYWx0aCA9PT0gMCkge1xuICAgICAgc2hpcHNBdmFpbGFibGUgLT0gMTtcbiAgICAgIHJldHVybiBbXCJzdW5rXCIsIHNoaXBzQXZhaWxhYmxlXTtcbiAgICB9XG4gICAgcmV0dXJuIFtcIm5vIHN1bmtcIiwgc2hpcHNBdmFpbGFibGVdO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGhpdCxcbiAgICBpc1N1bmssXG4gICAgY3VycmVudEhlYWx0aCxcbiAgICBjb29yZGluYXRlcyxcbiAgfTtcbn07XG5cbmNvbnN0IHZpZXcgPSAoKGRvYykgPT4ge1xuICBjb25zdCBzaG93U2hpcHMgPSAocGxheWVyLCBudW1iZXJPZlNoaXBzLCBzaGlwcykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZTaGlwczsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjdXJyZW50Q29vcmRpbmF0ZXMgPSBzaGlwc1tpXS5jb29yZGluYXRlcztcbiAgICAgIGNvbnN0IGN1cnJlbnRHcmlkcyA9IFtdO1xuICAgICAgY3VycmVudENvb3JkaW5hdGVzLmZvckVhY2goKGdyaWQpID0+IHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gZG9jLnF1ZXJ5U2VsZWN0b3IoYC4ke3BsYXllcn0gLmdyaWQke2dyaWR9YCk7XG4gICAgICAgIGNsYXNzTmFtZS5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcbiAgICAgICAgY2xhc3NOYW1lLmRhdGFzZXQuc2hpcE51bWJlciA9IGAke2l9YDtcbiAgICAgICAgY3VycmVudEdyaWRzLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBkaXNwbGF5TWlzcyA9IChncmlkKSA9PiB7XG4gICAgaWYgKGdyaWQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zaGlwLW51bWJlclwiKSA9PT0gbnVsbCAmJiAhKGdyaWQuY2xhc3NOYW1lLmluY2x1ZGVzKFwiZW1wdHlcIikpXG4gICAgJiYgIShncmlkLmNsYXNzTmFtZS5pbmNsdWRlcyhcImhpdFwiKSkpIHtcbiAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZChcImVtcHR5XCIpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBkaXNwbGF5SGl0ID0gKGdyaWQpID0+IHtcbiAgICBpZiAoIShncmlkLmdldEF0dHJpYnV0ZShcImRhdGEtc2hpcC1udW1iZXJcIikgPT09IG51bGwpICYmICEoZ3JpZC5jbGFzc05hbWUuaW5jbHVkZXMoXCJoaXRcIikpKSB7XG4gICAgICBncmlkLmNsYXNzTGlzdC5hZGQoXCJoaXRcIik7XG4gICAgfVxuICB9O1xuICByZXR1cm4geyBzaG93U2hpcHMsIGRpc3BsYXlNaXNzLCBkaXNwbGF5SGl0IH07XG59KShkb2N1bWVudCk7XG5cbmNvbnN0IGdhbWVib2FyZEZhY3RvcnkgPSAoKSA9PiB7XG4gIGNvbnN0IGJvYXJkc2l6ZSA9IDEwO1xuICBjb25zdCBudW1iZXJPZlNoaXBzID0gMTA7XG4gIGNvbnN0IHNoaXBzID0gW107XG5cbiAgZnVuY3Rpb24gZXh0cmFjdEdyaWROdW1iZXIoZ3JpZCkge1xuICAgIGlmIChncmlkLmNsYXNzTGlzdFswXS5sZW5ndGggPT09IDUpIHtcbiAgICAgIHJldHVybiBncmlkLmNsYXNzTGlzdFswXS5zdWJzdHIoLTEpO1xuICAgIH1cbiAgICByZXR1cm4gZ3JpZC5jbGFzc0xpc3RbMF0uc3Vic3RyKC0yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNoaXBBdHRhY2tlZChncmlkKSB7XG4gICAgaWYgKGdyaWQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zaGlwLW51bWJlclwiKSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGdyaWQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zaGlwLW51bWJlclwiKSwgMTApO1xuICAgIH1cbiAgICByZXR1cm4gXCJubyBzaGlwIGhhcyBiZWVuIGF0dGFja2VkXCI7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZVNoaXBMb2NhdGlvbnMobGVuZ3RoU2hpcCkge1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xuICAgIGxldCBjb2w7XG4gICAgbGV0IHJvdztcbiAgICBpZiAoZGlyZWN0aW9uID09PSAxKSB7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBib2FyZHNpemUpO1xuICAgICAgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGJvYXJkc2l6ZSAtIChsZW5ndGhTaGlwICsgMSkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm93ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGJvYXJkc2l6ZSAtIChsZW5ndGhTaGlwICsgMSkpKTtcbiAgICAgIGNvbCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJvYXJkc2l6ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U2hpcExvY2F0aW9ucyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoU2hpcDsgaSArPSAxKSB7XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAxKSB7XG4gICAgICAgIG5ld1NoaXBMb2NhdGlvbnMucHVzaChwYXJzZUludChgJHtyb3d9JHtjb2wgKyBpfWAsIDEwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdTaGlwTG9jYXRpb25zLnB1c2gocGFyc2VJbnQoYCR7cm93ICsgaX0ke2NvbH1gLCAxMCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3U2hpcExvY2F0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbGxpc2lvbihsb2NhdGlvbnMsIGN1cnJlbnROdW1iZXJPZlNoaXBzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gY3VycmVudE51bWJlck9mU2hpcHM7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2hpcCA9IHNoaXBzW2ldO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsb2NhdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHNoaXAuY29vcmRpbmF0ZXMuaW5kZXhPZihsb2NhdGlvbnNbal0pID49IDApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBnZW5lcmF0ZVNoaXBzID0gKCkgPT4ge1xuICAgIGxldCBsb2NhdGlvbnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlNoaXBzOyBpICs9IDEpIHtcbiAgICAgIGxldCBsZW5ndGhTaGlwO1xuICAgICAgaWYgKGkgPCAzKSBsZW5ndGhTaGlwID0gMztcbiAgICAgIGlmIChpID49IDMgJiYgaSA8IDcpIGxlbmd0aFNoaXAgPSAyO1xuICAgICAgaWYgKGkgPj0gNyAmJiBpIDw9IDkpIGxlbmd0aFNoaXAgPSAxO1xuICAgICAgY29uc3Qgc2hpcCA9IHNoaXBGYWN0b3J5KFtdLCBsZW5ndGhTaGlwKTtcbiAgICAgIHNoaXBzLnB1c2goc2hpcCk7XG4gICAgICBkbyB7XG4gICAgICAgIGxvY2F0aW9ucyA9IGdlbmVyYXRlU2hpcExvY2F0aW9ucyhsZW5ndGhTaGlwKTtcbiAgICAgIH0gd2hpbGUgKGNvbGxpc2lvbihsb2NhdGlvbnMsIGkpKTtcbiAgICAgIHNoaXBzW2ldLmNvb3JkaW5hdGVzID0gbG9jYXRpb25zO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKGUsIGN1cnJlbnRQbGF5ZXIsIG5leHRQbGF5ZXIpID0+IHtcbiAgICBsZXQgYXR0YWNrZWRDb29yZGluYXRlcztcbiAgICBsZXQgc2hpcEF0dGFja2VkID0gXCJubyBzaGlwIGhhcyBiZWVuIGF0dGFja2VkXCI7XG4gICAgaWYgKHR5cGVvZiBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBhdHRhY2tlZENvb3JkaW5hdGVzID0gZXh0cmFjdEdyaWROdW1iZXIoZS50YXJnZXQpO1xuICAgICAgc2hpcEF0dGFja2VkID0gZ2V0U2hpcEF0dGFja2VkKGUudGFyZ2V0KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgZ2FtZUZsb3cuc2V0TmV4dFR1cm4oZS50YXJnZXQsIGN1cnJlbnRQbGF5ZXIsIG5leHRQbGF5ZXIsIGF0dGFja2VkQ29vcmRpbmF0ZXMsIHNoaXBBdHRhY2tlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1hY2hpbmVTZWxlY3RlZEdyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucGxheWVyMSAuZ3JpZCR7ZX1gKTtcbiAgICAgIGF0dGFja2VkQ29vcmRpbmF0ZXMgPSBleHRyYWN0R3JpZE51bWJlcihtYWNoaW5lU2VsZWN0ZWRHcmlkKTtcbiAgICAgIHNoaXBBdHRhY2tlZCA9IGdldFNoaXBBdHRhY2tlZChtYWNoaW5lU2VsZWN0ZWRHcmlkKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgZ2FtZUZsb3cuc2V0TmV4dFR1cm4oXG4gICAgICAgIG1hY2hpbmVTZWxlY3RlZEdyaWQsXG4gICAgICAgIGN1cnJlbnRQbGF5ZXIsXG4gICAgICAgIG5leHRQbGF5ZXIsXG4gICAgICAgIGF0dGFja2VkQ29vcmRpbmF0ZXMsXG4gICAgICAgIHNoaXBBdHRhY2tlZCxcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG5vU2hpcHNBdmFpbGFibGUgPSAodGhlV2lubmVyLCByZW1haW5pbmdTaGlwcykgPT4ge1xuICAgIGlmIChyZW1haW5pbmdTaGlwcyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoZVdpbm5lcjtcbiAgICB9XG4gICAgcmV0dXJuIFwibm8gd2lubmVyXCI7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBnZW5lcmF0ZVNoaXBzLCBzaGlwcywgcmVjZWl2ZUF0dGFjaywgbm9TaGlwc0F2YWlsYWJsZSwgbnVtYmVyT2ZTaGlwcyxcbiAgfTtcbn07XG5cbmNvbnN0IHBsYXllckZhY3RvcnkgPSAoKSA9PiB7XG4gIGZ1bmN0aW9uIGNvbXB1dGVyQ2hvaWNlKCkge1xuICAgIGNvbnN0IGJvYXJkc2l6ZSA9IDEwO1xuICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJvYXJkc2l6ZSk7XG4gICAgY29uc3QgY29sID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYm9hcmRzaXplKTtcbiAgICByZXR1cm4gYCR7cm93fSR7Y29sfWA7XG4gIH1cbiAgLyogU2UgY29sb2NhIHRhYmxlcm8gMiB5YSBxdWUgZWwganVnYWRvciBzaWd1ZSB1biBwcm9jZXNvIGRpZmVyZW50ZSBhbCBkZSBsYSBtYXF1aW5hICovXG4gIGNvbnN0IGF0dGFjayA9IChwbGF5ZXJBdHRhY2tlZCwgZ2FtZWJvYXJkUGxheWVyMikgPT4ge1xuICAgIGlmIChwbGF5ZXJBdHRhY2tlZCA9PT0gXCJwbGF5ZXIyXCIpIHtcbiAgICAgIERPTS5wbGF5ZXIxUGxheXMoZ2FtZWJvYXJkUGxheWVyMik7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludChjb21wdXRlckNob2ljZSgpLCAxMCk7XG4gIH07XG4gIHJldHVybiB7IGF0dGFjayB9O1xufTtcblxuY29uc3QgZ2FtZUZsb3cgPSAoKCkgPT4ge1xuICBsZXQgY3VycmVudFR1cm4gPSBcInBsYXllcjFcIjtcbiAgbGV0IHdpbm5lciA9IFwibm8gd2lubmVyXCI7XG5cbiAgY29uc3QgZ2FtZWJvYXJkUGxheWVyMSA9IGdhbWVib2FyZEZhY3RvcnkoKTtcbiAgY29uc3QgZ2FtZWJvYXJkUGxheWVyMiA9IGdhbWVib2FyZEZhY3RvcnkoKTtcblxuICBnYW1lYm9hcmRQbGF5ZXIxLmdlbmVyYXRlU2hpcHMoKTtcbiAgZ2FtZWJvYXJkUGxheWVyMi5nZW5lcmF0ZVNoaXBzKCk7XG5cbiAgdmlldy5zaG93U2hpcHMoXCJwbGF5ZXIxXCIsIDEwLCBnYW1lYm9hcmRQbGF5ZXIxLnNoaXBzKTtcbiAgdmlldy5zaG93U2hpcHMoXCJwbGF5ZXIyXCIsIDEwLCBnYW1lYm9hcmRQbGF5ZXIyLnNoaXBzKTtcblxuICBjb25zdCBwbGF5ZXIxID0gcGxheWVyRmFjdG9yeSgpO1xuICBjb25zdCBwbGF5ZXIyID0gcGxheWVyRmFjdG9yeSgpO1xuICBwbGF5ZXIxLmF0dGFjayhcInBsYXllcjJcIiwgZ2FtZWJvYXJkUGxheWVyMik7XG5cbiAgZnVuY3Rpb24gY2hlY2tJZlNoaXBTdW5rKHN1bmtPck5vdFN1bmssIHNoaXAsIHBsYXllckF0dGFja2VkLCBwbGF5ZXJBdHRhY2tpbmcpIHtcbiAgICBpZiAoc3Vua09yTm90U3VuayA9PT0gXCJzdW5rXCIpIHtcbiAgICAgIHNoaXAuY29vcmRpbmF0ZXMuZm9yRWFjaCgoc2hpcFN1bmspID0+IHtcbiAgICAgICAgY29uc3QgZ3JpZEF0dGFja2VkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7cGxheWVyQXR0YWNrZWR9IC5ncmlkJHtzaGlwU3Vua31gKTtcbiAgICAgICAgZ3JpZEF0dGFja2VkLmNsYXNzTGlzdC5hZGQoXCJzdW5rXCIpO1xuICAgICAgICBpZiAocGxheWVyQXR0YWNraW5nID09PSBcInBsYXllcjFcIikge1xuICAgICAgICAgIHdpbm5lciA9IGdhbWVib2FyZFBsYXllcjIubm9TaGlwc0F2YWlsYWJsZShcbiAgICAgICAgICAgIHBsYXllckF0dGFja2luZyxcbiAgICAgICAgICAgIGdhbWVib2FyZFBsYXllcjIubnVtYmVyT2ZTaGlwcyxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbm5lciA9IGdhbWVib2FyZFBsYXllcjEubm9TaGlwc0F2YWlsYWJsZShcbiAgICAgICAgICAgIHBsYXllckF0dGFja2luZyxcbiAgICAgICAgICAgIGdhbWVib2FyZFBsYXllcjEubnVtYmVyT2ZTaGlwcyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYWxsSGl0TWV0aG9kKGdyaWQsIGN1cnJlbnRQbGF5ZXIsIG5leHRQbGF5ZXIsIGF0dGFja2VkQ29vcmRpbmF0ZXMsIHNoaXBBdHRhY2tlZCkge1xuICAgIGlmIChncmlkLmNsYXNzTmFtZS5pbmNsdWRlcyhcImhpdFwiKSkge1xuICAgICAgbGV0IHNoaXBIaXQ7XG4gICAgICBpZiAoY3VycmVudFR1cm4gPT09IFwicGxheWVyMVwiKSB7XG4gICAgICAgIHNoaXBIaXQgPSBnYW1lYm9hcmRQbGF5ZXIyLnNoaXBzW3NoaXBBdHRhY2tlZF07XG4gICAgICAgIGNvbnN0IGF0dGFja0Nvb3JkaW5hdGVzID0gcGFyc2VJbnQoYXR0YWNrZWRDb29yZGluYXRlcywgMTApO1xuXG4gICAgICAgIHNoaXBIaXQuY3VycmVudEhlYWx0aCA9IHNoaXBIaXQuaGl0KFxuICAgICAgICAgIHNoaXBIaXQuY29vcmRpbmF0ZXMsXG4gICAgICAgICAgYXR0YWNrQ29vcmRpbmF0ZXMsXG4gICAgICAgICAgc2hpcEhpdC5jdXJyZW50SGVhbHRoLFxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBzdW5rT3JOb3RTdW5rO1xuICAgICAgICBbc3Vua09yTm90U3VuaywgZ2FtZWJvYXJkUGxheWVyMi5udW1iZXJPZlNoaXBzXSA9IHNoaXBIaXQuaXNTdW5rKFxuICAgICAgICAgIHNoaXBIaXQuY3VycmVudEhlYWx0aCxcbiAgICAgICAgICBnYW1lYm9hcmRQbGF5ZXIyLm51bWJlck9mU2hpcHMsXG4gICAgICAgICk7XG5cbiAgICAgICAgY2hlY2tJZlNoaXBTdW5rKHN1bmtPck5vdFN1bmssIHNoaXBIaXQsIFwicGxheWVyMlwiLCBcInBsYXllcjFcIik7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUdXJuID09PSBcInBsYXllcjJcIikge1xuICAgICAgICBzaGlwSGl0ID0gZ2FtZWJvYXJkUGxheWVyMS5zaGlwc1tzaGlwQXR0YWNrZWRdO1xuICAgICAgICBjb25zdCBhdHRhY2tDb29yZGluYXRlcyA9IHBhcnNlSW50KGF0dGFja2VkQ29vcmRpbmF0ZXMsIDEwKTtcblxuICAgICAgICBzaGlwSGl0LmN1cnJlbnRIZWFsdGggPSBzaGlwSGl0LmhpdChcbiAgICAgICAgICBzaGlwSGl0LmNvb3JkaW5hdGVzLFxuICAgICAgICAgIGF0dGFja0Nvb3JkaW5hdGVzLFxuICAgICAgICAgIHNoaXBIaXQuY3VycmVudEhlYWx0aCxcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IHN1bmtPck5vdFN1bms7XG4gICAgICAgIFtzdW5rT3JOb3RTdW5rLCBnYW1lYm9hcmRQbGF5ZXIxLm51bWJlck9mU2hpcHNdID0gc2hpcEhpdC5pc1N1bmsoXG4gICAgICAgICAgc2hpcEhpdC5jdXJyZW50SGVhbHRoLFxuICAgICAgICAgIGdhbWVib2FyZFBsYXllcjEubnVtYmVyT2ZTaGlwcyxcbiAgICAgICAgKTtcbiAgICAgICAgY2hlY2tJZlNoaXBTdW5rKHN1bmtPck5vdFN1bmssIHNoaXBIaXQsIFwicGxheWVyMVwiLCBcInBsYXllcjJcIik7XG4gICAgICB9XG4gICAgICBjdXJyZW50VHVybiA9IGN1cnJlbnRQbGF5ZXI7XG4gICAgfSBlbHNlIHsgY3VycmVudFR1cm4gPSBuZXh0UGxheWVyOyB9XG4gIH1cblxuICBjb25zdCBzZXROZXh0VHVybiA9IChncmlkLCBjdXJyZW50UGxheWVyLCBuZXh0UGxheWVyLCBhdHRhY2tlZENvb3JkaW5hdGVzLCBzaGlwQXR0YWNrZWQpID0+IHtcbiAgICBpZiAoZ3JpZC5jbGFzc05hbWUuaW5jbHVkZXMoXCJlbXB0eVwiKSB8fCBncmlkLmNsYXNzTmFtZS5pbmNsdWRlcyhcImhpdFwiKSkge1xuICAgICAgY3VycmVudFR1cm4gPSBjdXJyZW50UGxheWVyO1xuICAgIH0gaWYgKCEoZ3JpZC5jbGFzc05hbWUuaW5jbHVkZXMoXCJlbXB0eVwiKSkgJiYgIShncmlkLmNsYXNzTmFtZS5pbmNsdWRlcyhcImhpdFwiKSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgdmlldy5kaXNwbGF5TWlzcyhncmlkKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgdmlldy5kaXNwbGF5SGl0KGdyaWQpO1xuICAgICAgLyogTGxhbWFyIGEgaGl0IGUgaXNTdW5rIGRlbCByZXNwZWN0aXZvIGJhcmNvICovXG4gICAgICBjYWxsSGl0TWV0aG9kKGdyaWQsIGN1cnJlbnRQbGF5ZXIsIG5leHRQbGF5ZXIsIGF0dGFja2VkQ29vcmRpbmF0ZXMsIHNoaXBBdHRhY2tlZCk7XG4gICAgfVxuICB9O1xuXG4gIGxldCB0aGVuID0gRGF0ZS5ub3coKTtcbiAgbGV0IG5vdztcblxuICBmdW5jdGlvbiBnYW1lTG9vcCgpIHtcbiAgICBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGRpZmZlcmVuY2UgPSBub3cgLSB0aGVuO1xuICAgIGlmICh3aW5uZXIgPT09IFwibm8gd2lubmVyXCIpIHtcbiAgICAgIGlmIChkaWZmZXJlbmNlID4gMTAwMCAvIDYwKSB7XG4gICAgICAgIGlmIChjdXJyZW50VHVybiA9PT0gXCJwbGF5ZXIyXCIpIHtcbiAgICAgICAgICBjb25zdCBjb21wdXRlckNob2ljZSA9IHBsYXllcjIuYXR0YWNrKFwicGxheWVyMVwiKTtcbiAgICAgICAgICBnYW1lYm9hcmRQbGF5ZXIxLnJlY2VpdmVBdHRhY2soY29tcHV0ZXJDaG9pY2UsIFwicGxheWVyMlwiLCBcInBsYXllcjFcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhlbiA9IG5vdztcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZ2FtZUxvb3ApO1xuICAgIH1cbiAgfVxuXG4gIGdhbWVMb29wKCk7XG5cbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50VHVybixcbiAgICBzZXROZXh0VHVybixcbiAgICB3aW5uZXIsXG4gICAgZ2V0IHR1cm4oKSB7IHJldHVybiBjdXJyZW50VHVybjsgfSxcbiAgICBnZXQgdGhlV2lubmVyKCkgeyByZXR1cm4gd2lubmVyOyB9LFxuICB9O1xufSkoKTtcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJncmlkc1BsYXllcjIiLCJkb2MiLCJET00iLCJxdWVyeVNlbGVjdG9yQWxsIiwicGxheWVyMVBsYXlzIiwiZ2FtZWJvYXJkUGxheWVyMiIsImZvckVhY2giLCJncmlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdhbWVGbG93IiwidGhlV2lubmVyIiwidHVybiIsInJlY2VpdmVBdHRhY2siLCJzaGlwRmFjdG9yeSIsImNvb3JkaW5hdGVzIiwibGVuZ3RoU2hpcCIsImhpdCIsInNoaXBDb29yZGluYXRlcyIsImNvb3JkaW5hdGUiLCJoZWFsdGgiLCJzaGlwc0hlYWx0aCIsImluY2x1ZGVzIiwiaXNTdW5rIiwibnVtYmVyT2ZTaGlwcyIsInNoaXBzQXZhaWxhYmxlIiwiY3VycmVudEhlYWx0aCIsInZpZXciLCJzaG93U2hpcHMiLCJwbGF5ZXIiLCJzaGlwcyIsImN1cnJlbnRDb29yZGluYXRlcyIsImN1cnJlbnRHcmlkcyIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJzaGlwTnVtYmVyIiwiZGlzcGxheU1pc3MiLCJnZXRBdHRyaWJ1dGUiLCJkaXNwbGF5SGl0IiwiZ2FtZWJvYXJkRmFjdG9yeSIsImV4dHJhY3RHcmlkTnVtYmVyIiwic3Vic3RyIiwiZ2V0U2hpcEF0dGFja2VkIiwicGFyc2VJbnQiLCJnZW5lcmF0ZVNoaXBMb2NhdGlvbnMiLCJjb2wiLCJyb3ciLCJkaXJlY3Rpb24iLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJuZXdTaGlwTG9jYXRpb25zIiwiY29sbGlzaW9uIiwibG9jYXRpb25zIiwiY3VycmVudE51bWJlck9mU2hpcHMiLCJzaGlwIiwiaiIsImluZGV4T2YiLCJnZW5lcmF0ZVNoaXBzIiwiY3VycmVudFBsYXllciIsIm5leHRQbGF5ZXIiLCJhdHRhY2tlZENvb3JkaW5hdGVzIiwic2hpcEF0dGFja2VkIiwic2V0TmV4dFR1cm4iLCJtYWNoaW5lU2VsZWN0ZWRHcmlkIiwibm9TaGlwc0F2YWlsYWJsZSIsInJlbWFpbmluZ1NoaXBzIiwicGxheWVyRmFjdG9yeSIsImF0dGFjayIsInBsYXllckF0dGFja2VkIiwiY3VycmVudFR1cm4iLCJ3aW5uZXIiLCJnYW1lYm9hcmRQbGF5ZXIxIiwicGxheWVyMSIsInBsYXllcjIiLCJjaGVja0lmU2hpcFN1bmsiLCJzdW5rT3JOb3RTdW5rIiwicGxheWVyQXR0YWNraW5nIiwic2hpcFN1bmsiLCJub3ciLCJ0aGVuIiwiRGF0ZSIsImdhbWVMb29wIiwiY29tcHV0ZXJDaG9pY2UiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzaGlwSGl0IiwiYXR0YWNrQ29vcmRpbmF0ZXMiLCJjYWxsSGl0TWV0aG9kIl0sInNvdXJjZVJvb3QiOiIifQ==