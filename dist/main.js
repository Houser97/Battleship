(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([n.id,":root {\n    --thickness-boarders: 2px;\n    --color-boarders: rgb(46, 46, 183);\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    outline: none;\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: #E3F2FD;\n    height: 100vh;\n}\n\nheader {\n    width: 100%;\n    background-color: rgb(29, 25, 25);\n    color: white;\n    font-size: 10vh;\n    min-height: 12vh;\n    max-height: 12vh;\n    font-weight: 600;\n    display: flex;\n    justify-content: center; align-items: center;\n}\n\n.gameboard {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/*-------------------------------------------------------GRID*/\n/*-----------------------------------------------------------*/\n.outer-grid{\n    display: grid;\n    min-height: 450px;\n    min-width: 450px;\n    grid-template-columns: repeat(11,1fr);\n    grid-template-rows: repeat(11,1fr);\n    margin: 10%;\n}\n\n.grid-player {\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    grid-template-columns: repeat(10,1fr);\n    grid-template-rows: repeat(10,1fr);\n    border: 1.4px solid black;\n}\n\n.grid-unit {\n    border: 1px solid silver;\n}\n\n.coordinate-top{\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 1;\n    grid-template-columns: repeat(10,1fr);\n    text-align: center;\n    align-items: center;\n}\n\n.coordinate-left{\n    display: grid;\n    grid-column: 1;\n    grid-row: 2/-1;\n    grid-template-rows: repeat(10,1fr);\n    align-items: center; text-align: center;\n}\n\n.ship {\n    background-color: rgba(35, 35, 245, 0.55);\n}\n\n.empty{\n    background-color: rgb(223, 65, 65);\n}\n\n.hit{\n    background-color: rgb(70, 223, 65);\n}\n\n.sunk {\n    background-color: black;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,kCAAkC;AACtC;;AAEA;IACI,UAAU;IACV,SAAS;IACT,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,iCAAiC;IACjC,YAAY;IACZ,eAAe;IACf,gBAAgB;IAChB,gBAAgB;IAChB,gBAAgB;IAChB,aAAa;IACb,uBAAuB,EAAE,mBAAmB;AAChD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA,8DAA8D;AAC9D,8DAA8D;AAC9D;IACI,aAAa;IACb,iBAAiB;IACjB,gBAAgB;IAChB,qCAAqC;IACrC,kCAAkC;IAClC,WAAW;AACf;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,cAAc;IACd,qCAAqC;IACrC,kCAAkC;IAClC,yBAAyB;AAC7B;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,WAAW;IACX,qCAAqC;IACrC,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,cAAc;IACd,kCAAkC;IAClC,mBAAmB,EAAE,kBAAkB;AAC3C;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,uBAAuB;AAC3B",sourcesContent:[":root {\n    --thickness-boarders: 2px;\n    --color-boarders: rgb(46, 46, 183);\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    outline: none;\n    box-sizing: border-box;\n}\n\nbody {\n    background-color: #E3F2FD;\n    height: 100vh;\n}\n\nheader {\n    width: 100%;\n    background-color: rgb(29, 25, 25);\n    color: white;\n    font-size: 10vh;\n    min-height: 12vh;\n    max-height: 12vh;\n    font-weight: 600;\n    display: flex;\n    justify-content: center; align-items: center;\n}\n\n.gameboard {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n/*-------------------------------------------------------GRID*/\n/*-----------------------------------------------------------*/\n.outer-grid{\n    display: grid;\n    min-height: 450px;\n    min-width: 450px;\n    grid-template-columns: repeat(11,1fr);\n    grid-template-rows: repeat(11,1fr);\n    margin: 10%;\n}\n\n.grid-player {\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    grid-template-columns: repeat(10,1fr);\n    grid-template-rows: repeat(10,1fr);\n    border: 1.4px solid black;\n}\n\n.grid-unit {\n    border: 1px solid silver;\n}\n\n.coordinate-top{\n    display: grid;\n    grid-column: 2/-1;\n    grid-row: 1;\n    grid-template-columns: repeat(10,1fr);\n    text-align: center;\n    align-items: center;\n}\n\n.coordinate-left{\n    display: grid;\n    grid-column: 1;\n    grid-row: 2/-1;\n    grid-template-rows: repeat(10,1fr);\n    align-items: center; text-align: center;\n}\n\n.ship {\n    background-color: rgba(35, 35, 245, 0.55);\n}\n\n.empty{\n    background-color: rgb(223, 65, 65);\n}\n\n.hit{\n    background-color: rgb(70, 223, 65);\n}\n\n.sunk {\n    background-color: black;\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],c=0;c<n.length;c++){var s=n[c],A=r.base?s[0]+r.base:s[0],l=o[A]||0,u="".concat(A," ").concat(l);o[A]=l+1;var d=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=a(p,r);r.byIndex=c,e.splice(c,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var c=t(o[i]);e[c].references--}for(var s=r(n,a),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),a=t.n(r),o=t(569),i=t.n(o),c=t(565),s=t.n(c),A=t(216),l=t.n(A),u=t(589),d=t.n(u),p=t(426),f={};function h(n){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},h(n)}f.styleTagTransform=d(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),e()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;var g,m,C=(g=document.querySelector(".grid-player.player2"),{player1Plays:function(n){return g.addEventListener("click",(function(e){"player1"===B.currentTurn&&n.receiveAttack(e,"player1","player2")}))}}),y=function(n,e){return{hit:function(n,e,t){var r=t;return n.includes(e)?r-=1:r},isSunk:function(n){return 0===n?"sunk":"no sunk"},currentHealth:e,coordinates:n}},b=(m=document,{showShips:function(n,e,t){for(var r=function(e){var r=t[e].coordinates,a=[];r.forEach((function(t){var r=m.querySelector(".".concat(n," .grid").concat(t));r.classList.add("ship"),r.dataset.shipNumber="".concat(e),a.push(r)}))},a=0;a<e;a+=1)r(a)},displayMiss:function(n){null!==n.getAttribute("data-ship-number")||n.className.includes("empty")||n.className.includes("hit")||n.classList.add("empty")},displayHit:function(n){null===n.getAttribute("data-ship-number")||n.className.includes("hit")||n.classList.add("hit")}}),v=function(){var n=[];function e(n){return 5===n.classList[0].length?n.classList[0].substr(-1):n.classList[0].substr(-2)}function t(n){return null!==n.getAttribute("data-ship-number")?parseInt(n.getAttribute("data-ship-number"),10):"no ship has been attacked"}function r(n){var e,t,r=Math.floor(2*Math.random());1===r?(t=Math.floor(10*Math.random()),e=Math.floor(Math.random()*(10-(n+1)))):(t=Math.floor(Math.random()*(10-(n+1))),e=Math.floor(10*Math.random()));for(var a=[],o=0;o<n;o+=1)1===r?a.push(parseInt("".concat(t).concat(e+o),10)):a.push(parseInt("".concat(t+o).concat(e),10));return a}function a(e,t){for(var r=0;r<=t;r+=1)for(var a=n[r],o=0;o<e.length;o+=1)if(a.coordinates.indexOf(e[o])>=0)return!0;return!1}return{generateShips:function(){for(var e,t=0;t<10;t+=1){var o=void 0;t<3&&(o=3),t>=3&&t<7&&(o=2),t>=7&&t<=9&&(o=1);var i=y([],o);n.push(i);do{e=r(o)}while(a(e,t));n[t].coordinates=e}},ships:n,receiveAttack:function(n,r,a){var o,i="no ship has been attacked";if("object"===h(n))o=e(n.target),i=t(n.target),B.setNextTurn(n.target,r,a,o,i);else{var c=document.querySelector(".player1 .grid".concat(n));o=e(c),i=t(c),B.setNextTurn(c,r,a,o,i)}}}},I=function(){return{attack:function(n,e){return"player2"===n&&C.player1Plays(e),parseInt((t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),"".concat(t).concat(r)),10);var t,r}}},B=function(){var n="player1",e=0,t=v(),r=v();t.generateShips(),r.generateShips(),b.showShips("player1",10,t.ships),b.showShips("player2",10,r.ships);var a=I(),o=I();a.attack("player2",r);var i,c=Date.now();return function e(){if((i=Date.now())-c>1e3/60){if("player2"===n){var r=o.attack("player1");t.receiveAttack(r,"player2","player1")}c=i}window.requestAnimationFrame(e)}(),{currentTurn:n,setNextTurn:function(a,o,i,c,s){if(a.className.includes("empty")||a.className.includes("hit"))n=o;else if(!a.className.includes("empty")&&!a.className.includes("hit"))if(b.displayMiss(a),b.displayHit(a),a.className.includes("hit")){if("player1"===n){e=r.ships[s];var A=parseInt(c,10);e.currentHealth=e.hit(e.coordinates,A,e.currentHealth),"sunk"===e.isSunk(e.currentHealth)&&e.coordinates.forEach((function(n){document.querySelector(".player2 .grid".concat(n)).classList.add("sunk")}))}else if("player2"===n){e=t.ships[s];var l=parseInt(c,10);e.currentHealth=e.hit(e.coordinates,l,e.currentHealth),"sunk"===e.isSunk(e.currentHealth)&&e.coordinates.forEach((function(n){document.querySelector(".player1 .grid".concat(n)).classList.add("sunk")}))}n=o}else n=i}}}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,